{"version":3,"file":"index.mjs","sources":["../lib/binary.browser.js","../lib/module.js","../lib/routine.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base64ToUint8Array from '@stdlib/string-base-base64-to-uint8array';\n\n\n// MAIN //\n\nvar wasm = base64ToUint8Array( 'AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAETA2AAAGADf39/AX1gBH9/f38BfQIPAQNlbnYGbWVtb3J5AgAAAwQDAAECB0wEEV9fd2FzbV9jYWxsX2N0b3JzAAAYX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzAAAHY19zbnJtMgABD2Nfc25ybTJfbmRhcnJheQACCoIDAwMAAQsaACAAIAEgAkEBIABrIAJsQQAgAkEATBsQAgvgAgIFfQN/QQEhCSAAQQBKBH0DQCAAIApGRQRAAkAgASADQQJ0aioCACIIiyIHQwAAgFleBEAgBiAHQwAAgBmUIgYgBpSSIQZBACEJDAELIAdDAAAAIF0EQCAJIQtBACEJIAtFDQEgBSAHQwAAAGWUIgUgBZSSIQVBASEJDAELIAQgCCAIlJIhBAsgCkEBaiEKIAIgA2ohAwwBCwsCQCAGQwAAAABeBEAgBEMAAIAZlEMAAIAZlCAGkiIFIAYgBEP//39/XhsgBSAEQwAAAABfGyEEQwAAgGUhBgwBC0MAAIA/IQYgBUMAAAAAXkUNACAEIARcIARDAAAAAF5yIARD//9/f15yRQRAIAUhBEMAAAAaIQYMAQsgBJEiBCAFkUMAAAAalCIFIAQgBV0iABsgBSAEIAAbIgSVIgUgBZS7RAAAAAAAAPA/oCAEIASUu6K2IQQLIAYgBJGUBUMAAAAACws=' );\n\n\n// EXPORTS //\n\nexport default wasm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isWebAssemblyMemory from '@stdlib/assert-is-wasm-memory';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport WasmModule from '@stdlib/wasm-module-wrapper';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport wasmBinary from './binary.js';\n\n\n// MAIN //\n\n/**\n* BLAS routine WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {Object} memory - WebAssembly memory instance\n* @throws {TypeError} must provide a WebAssembly memory instance\n* @returns {Module} module instance\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var snrm2 = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* snrm2.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* snrm2.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var out = snrm2.main( N, xptr, 1 );\n* // returns ~7.42\n*/\nfunction Module( memory ) {\n\tif ( !( this instanceof Module ) ) {\n\t\treturn new Module( memory );\n\t}\n\tif ( !isWebAssemblyMemory( memory ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a WebAssembly memory instance. Value: `%s`.', memory ) );\n\t}\n\t// Call the parent constructor:\n\tWasmModule.call( this, wasmBinary, memory, {\n\t\t'env': {\n\t\t\t'memory': memory\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Module, WasmModule );\n\n/**\n* Calculates the L2-norm of a single-precision floating-point vector.\n*\n* @name main\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @returns {number} the L2-norm\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var snrm2 = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* snrm2.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* snrm2.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var out = snrm2.main( N, xptr, 1 );\n* // returns ~7.42\n*/\nsetReadOnly( Module.prototype, 'main', function snrm2( N, xptr, strideX ) {\n\treturn this._instance.exports.c_snrm2( N, xptr, strideX );\n});\n\n/**\n* Calculates the L2-norm of a single-precision floating-point vector using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @returns {number} the L2-norm\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var snrm2 = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* snrm2.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* snrm2.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var out = snrm2.ndarray( N, xptr, 1, 0 );\n* // returns ~7.42\n*/\nsetReadOnly( Module.prototype, 'ndarray', function snrm2( N, xptr, strideX, offsetX ) {\n\treturn this._instance.exports.c_snrm2_ndarray( N, xptr, strideX, offsetX );\n});\n\n\n// EXPORTS //\n\nexport default Module;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport Memory from '@stdlib/wasm-memory';\nimport arrays2ptrs from '@stdlib/wasm-base-arrays2ptrs';\nimport strided2object from '@stdlib/wasm-base-strided2object';\nimport Module from './module.js';\n\n\n// MAIN //\n\n/**\n* Routine constructor.\n*\n* @private\n* @constructor\n* @returns {Routine} routine instance\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var snrm2 = new Routine();\n*\n* // Initialize the module:\n* snrm2.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* var out = snrm2.main( x.length, x, 1 );\n* // returns ~7.42\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var snrm2 = new Routine();\n*\n* // Initialize the module:\n* snrm2.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* var out = snrm2.ndarray( x.length, x, 1, 0 );\n* // returns ~7.42\n*/\nfunction Routine() {\n\tif ( !( this instanceof Routine ) ) {\n\t\treturn new Routine();\n\t}\n\tModule.call( this, new Memory({\n\t\t'initial': 0\n\t}));\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Routine, Module );\n\n/**\n* Calculates the L2-norm of a single-precision floating-point vector.\n*\n* @name main\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {number} the L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var snrm2 = new Routine();\n*\n* // Initialize the module:\n* snrm2.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* var out = snrm2.main( x.length, x, 1 );\n* // returns ~7.42\n*/\nsetReadOnly( Routine.prototype, 'main', function snrm2( N, x, strideX ) {\n\treturn this.ndarray( N, x, strideX, stride2offset( N, strideX ) );\n});\n\n/**\n* Calculates the L2-norm of a single-precision floating-point vector using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @returns {number} the L2-norm\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Create a new routine:\n* var snrm2 = new Routine();\n*\n* // Initialize the module:\n* snrm2.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* var out = snrm2.ndarray( x.length, x, 1, 0 );\n* // returns ~7.42\n*/\nsetReadOnly( Routine.prototype, 'ndarray', function snrm2( N, x, strideX, offsetX ) {\n\tvar ptrs;\n\tvar p0;\n\n\t// Convert the input array to \"pointers\" in the module's memory:\n\tptrs = arrays2ptrs( this, [\n\t\tstrided2object( N, x, strideX, offsetX )\n\t]);\n\tp0 = ptrs[ 0 ];\n\n\t// Perform computation by calling the corresponding parent method:\n\treturn Module.prototype.ndarray.call( this, N, p0.ptr, p0.stride, p0.offset ); // eslint-disable-line max-len\n});\n\n\n// EXPORTS //\n\nexport default Routine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Routine from './routine.js';\n\n\n// MAIN //\n\n/**\n* WebAssembly module to calculate the L2-norm of a single-precision floating-point vector.\n*\n* @name snrm2\n* @type {Routine}\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* var out = snrm2.main( x.length, x, 1 );\n* // returns ~7.42\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* var out = snrm2.ndarray( x.length, x, 1, 0 );\n* // returns ~7.42\n*/\nvar snrm2 = new Routine();\nsnrm2.initializeSync(); // eslint-disable-line node/no-sync\n\n\n// EXPORTS //\n\nexport default snrm2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly routine to calculate the L2-norm of a single-precision floating-point vector.\n*\n* @module @stdlib/blas-base-wasm-snrm2\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import snrm2 from '@stdlib/blas-base-wasm-snrm2';\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* var out = snrm2.main( x.length, x, 1 );\n* // returns ~7.42\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import snrm2 from '@stdlib/blas-base-wasm-snrm2';\n*\n* // Define a strided array:\n* var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n*\n* // Perform operation:\n* var out = snrm2.ndarray( x.length, x, 1, 0 );\n* // returns ~7.42\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import snrm2 from '@stdlib/blas-base-wasm-snrm2';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var mod = new snrm2.Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* mod.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float32';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* mod.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var out = mod.main( N, xptr, 1 );\n* // returns ~7.42\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport Module from './module.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'Module', Module );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"Module\": \"main.Module\" }\n"],"names":["wasm","base64ToUint8Array","Module","memory","this","isWebAssemblyMemory","TypeError","format","WasmModule","call","wasmBinary","env","Routine","Memory","initial","inherits","setReadOnly","prototype","N","xptr","strideX","_instance","exports","c_snrm2","offsetX","c_snrm2_ndarray","x","ndarray","stride2offset","p0","arrays2ptrs","strided2object","ptr","stride","offset","snrm2","initializeSync","main"],"mappings":";;q7BA2BA,IAAIA,EAAOC,EAAoB,gtBCgD/B,SAASC,EAAQC,GAChB,KAAQC,gBAAgBF,GACvB,OAAO,IAAIA,EAAQC,GAEpB,IAAME,EAAqBF,GAC1B,MAAM,IAAIG,UAAWC,EAAQ,6EAA8EJ,IAS5G,OANAK,EAAWC,KAAML,KAAMM,EAAYP,EAAQ,CAC1CQ,IAAO,CACNR,OAAUA,KAILC,IACR,CChBA,SAASQ,IACR,OAAQR,gBAAgBQ,GAGxBV,EAAOO,KAAML,KAAM,IAAIS,EAAO,CAC7BC,QAAW,KAELV,MALC,IAAIQ,CAMb,CDWAG,EAAUb,EAAQM,GA+ClBQ,EAAad,EAAOe,UAAW,QAAQ,SAAgBC,EAAGC,EAAMC,GAC/D,OAAOhB,KAAKiB,UAAUC,QAAQC,QAASL,EAAGC,EAAMC,EACjD,IAgDAJ,EAAad,EAAOe,UAAW,WAAW,SAAgBC,EAAGC,EAAMC,EAASI,GAC3E,OAAOpB,KAAKiB,UAAUC,QAAQG,gBAAiBP,EAAGC,EAAMC,EAASI,EAClE,IC3GAT,EAAUH,EAASV,GA8BnBc,EAAaJ,EAAQK,UAAW,QAAQ,SAAgBC,EAAGQ,EAAGN,GAC7D,OAAOhB,KAAKuB,QAAST,EAAGQ,EAAGN,EAASQ,EAAeV,EAAGE,GACvD,IA+BAJ,EAAaJ,EAAQK,UAAW,WAAW,SAAgBC,EAAGQ,EAAGN,EAASI,GACzE,IACIK,EASJ,OAHAA,EAHOC,EAAa1B,KAAM,CACzB2B,EAAgBb,EAAGQ,EAAGN,EAASI,KAErB,GAGJtB,EAAOe,UAAUU,QAAQlB,KAAML,KAAMc,EAAGW,EAAGG,IAAKH,EAAGI,OAAQJ,EAAGK,OACtE,IC3GG,IAACC,EAAQ,IAAIvB,EAChBuB,EAAMC,iBCqCNpB,EAAAqB,EAAA,SAAAnC"}